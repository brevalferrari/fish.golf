<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0">
    <channel>
        <title>Blip - devlog (fr)</title>
        <link>https://gitdab.com/p6nj/blip</link>
        <description
        >Compte-rendus hebdomadaires de l'avancement du projet</description>
        <item>
            <title>01/05 - 02/05</title>
            <link>https://fish.golf/blip1.log.txt</link>
            <description
            ><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/">
            <h1>
                Semaine 1
            </h1>
            <h2>
                Meta
            </h2>
            <p>
                J'ai renommé BNG en Blip pour refléter la nouvelle conception et changé la license en MIT comme indiqué sur le cahier des charges (<a href="https://gitdab.com/breval/blip/commit/d4c8b13376153e2456537b8776f58f8a48d1f742">d4c8b13376153e2456537b8776f58f8a48d1f742</a>).
            </p>
            <h2>
                Reconception du langage et du CLI
            </h2>
            <p>
                J'ai refait la conception de l'interface en ligne de commande et mis au propre dans <a href="https://gitdab.com/breval/blip/src/commit/322422bf195e64789192987c2cec5428d3361fc8/doc/cli-design.txt">une pseudo page man</a> (<a href="https://gitdab.com/breval/blip/commit/322422bf195e64789192987c2cec5428d3361fc8">322422bf195e64789192987c2cec5428d3361fc8</a>). J'ai pris le choix d'avoir des notes de plusieurs lettres car je pense que ça pourrait passer à l'implémentation ; on verra. Le langage est prêt également (<a href="https://gitdab.com/breval/blip/commit/3fdb495a3bb975805355e725911656d1d1b8df68">3fdb495a3bb975805355e725911656d1d1b8df68</a>). Trois problèmes sont apparus à la reconception du langage :
            </p>
            <ol>
                <li>
                    Le temps total du morceau était donné sous la variable T qui était aussi utilisé pour le tempo donc le temps total n'est plus supporté.
                </li>
                <li>
                    Il manquait une fonction pour définir la longueur des notes, j'ai donc rajouté une option du CLI et une variable l pour suivre les règles classiques MML par défaut (<a href="https://gitdab.com/breval/blip/commit/574460a098121671e0449af3fc652c3cde1ea4e0">574460a098121671e0449af3fc652c3cde1ea4e0</a>).
                </li>
                <li>
                    Enfin, pour réaliser des effets d'ADSR dans l'instrument par exemple, il manquait une variable pour connaître le temps total de la note ; cependant, il est déjà possible de le connaître grâce à l'expression de la nouvelle option par la variable l ou une variable customisée qui influe sur cette expression (problème réglé).
                </li>
            </ol>
            <h2>
                Structure
            </h2>
            <p>
                Enfin, j'ai commencé mes recherches sur la structure du projet. J'apprécie toujours l'idée initiale de le séparer en une librairie de parsing et de compilation en samples et un binaire pour l'interface CLI. Cela permettra de réutiliser la librairie pour des extensions ou d'autres interfaces.
                <br>J'ai trouvé <a href="https://student.cs.uwaterloo.ca/~cs446/1171/Arch_Design_Activity/Interpreter.pdf">ce PDF</a> qui m'a montré l'importance du contexte dans l'interprétation du langage : j'en ai besoin pour garder une trace de l'état des variables y compris t (Bleeperpreter reset t à chaque note, ce qui donne un artifact audio perceptible et désagréable entre chaque note).
                <br>Il sera plus consistent pour l'affichage des erreurs de laisser le parser se charger des bouts délimités (boucles, tuples, slopes).
                <br>Je pourrais également utiliser un itérateur sur tout le chemin des données ; cependant, si le parser se charge des délimitations, il faudra gérer des données récursives et donc probablement allouer des vecteurs et surtout trouver le meilleur endroit pour aplatir ces structures. Peut-être que le parser peut se charger de valider ces délimitations et donner à l'interpréteur / compilateur une version déjà aplatie mais alors le parser devra renvoyer parfois ou tout le temps des vecteurs.
            </p>
            </div>]]></description>
        </item>
    </channel>
</rss>
