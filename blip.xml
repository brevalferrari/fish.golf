<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0">
    <channel>
        <title>Blip - devlog (fr)</title>
        <link>https://gitdab.com/p6nj/blip</link>
        <description
        >Compte-rendus hebdomadaires de l'avancement du projet</description>
        <item>
            <title>01/05 - 02/05</title>
            <link>https://gitdab.com/p6nj/blip</link>
            <description
            ><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/">
            <h1>
                Semaine 1
            </h1>
            <h2>
                Meta
            </h2>
            <p>
                J'ai renommé BNG en Blip pour refléter la nouvelle conception et changé la license en MIT comme indiqué sur le cahier des charges (<a href="https://gitdab.com/breval/blip/commit/d4c8b13376153e2456537b8776f58f8a48d1f742">d4c8b13376153e2456537b8776f58f8a48d1f742</a>).
            </p>
            <h2>
                Reconception du langage et du CLI
            </h2>
            <p>
                J'ai refait la conception de l'interface en ligne de commande et mis au propre dans <a href="https://gitdab.com/breval/blip/src/commit/322422bf195e64789192987c2cec5428d3361fc8/doc/cli-design.txt">une pseudo page man</a> (<a href="https://gitdab.com/breval/blip/commit/322422bf195e64789192987c2cec5428d3361fc8">322422bf195e64789192987c2cec5428d3361fc8</a>). J'ai pris le choix d'avoir des notes de plusieurs lettres car je pense que ça pourrait passer à l'implémentation ; on verra. Le langage est prêt également (<a href="https://gitdab.com/breval/blip/commit/3fdb495a3bb975805355e725911656d1d1b8df68">3fdb495a3bb975805355e725911656d1d1b8df68</a>). Trois problèmes sont apparus à la reconception du langage :
            </p>
            <ol>
                <li>
                    Le temps total du morceau était donné sous la variable T qui était aussi utilisé pour le tempo donc le temps total n'est plus supporté.
                </li>
                <li>
                    Il manquait une fonction pour définir la longueur des notes, j'ai donc rajouté une option du CLI et une variable l pour suivre les règles classiques MML par défaut (<a href="https://gitdab.com/breval/blip/commit/574460a098121671e0449af3fc652c3cde1ea4e0">574460a098121671e0449af3fc652c3cde1ea4e0</a>).
                </li>
                <li>
                    Enfin, pour réaliser des effets d'ADSR dans l'instrument par exemple, il manquait une variable pour connaître le temps total de la note ; cependant, il est déjà possible de le connaître grâce à l'expression de la nouvelle option par la variable l ou une variable customisée qui influe sur cette expression (problème réglé).
                </li>
            </ol>
            <h2>
                Structure
            </h2>
            <p>
                Enfin, j'ai commencé mes recherches sur la structure du projet. J'apprécie toujours l'idée initiale de le séparer en une librairie de parsing et de compilation en samples et un binaire pour l'interface CLI. Cela permettra de réutiliser la librairie pour des extensions ou d'autres interfaces.
                <br>J'ai trouvé <a href="https://student.cs.uwaterloo.ca/~cs446/1171/Arch_Design_Activity/Interpreter.pdf">ce PDF</a> qui m'a montré l'importance du contexte dans l'interprétation du langage : j'en ai besoin pour garder une trace de l'état des variables y compris t (Bleeperpreter reset t à chaque note, ce qui donne un artifact audio perceptible et désagréable entre chaque note).
                <br>Il sera plus consistent pour l'affichage des erreurs de laisser le parser se charger des bouts délimités (boucles, tuples, slopes).
                <br>Je pourrais également utiliser un itérateur sur tout le chemin des données ; cependant, si le parser se charge des délimitations, il faudra gérer des données récursives et donc probablement allouer des vecteurs et surtout trouver le meilleur endroit pour aplatir ces structures. Peut-être que le parser peut se charger de valider ces délimitations et donner à l'interpréteur / compilateur une version déjà aplatie mais alors le parser devra renvoyer parfois ou tout le temps des vecteurs.
                <br>Un moyen de résoudre ce problème serait d'utiliser le dispatch dynamique de Rust afin de gérer des types différents via un trait commun, avec ou sans Box (ce sera je pense nécessaire).
                On pourrait donc avoir une struct pour chaque élément du langage (silence, boucle, note...) sous un trait commun, retourner Box<dyn Trait> de chacun d'entre eux et avoir une méthode de ce trait capable de rendre un nouveau contexte à partir d'un ancien. Les samples générés seront stockés dans ce contexte. La seule chose à prendre en compte pour que ce système fonctionne est la liste des règles à respecter pour que le trait soit dyn-compatible : <a href="https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility">dyn compatibility</a>.
            </p>
            </div>]]></description>
        </item>
        <item>
            <title>05/05 - 09/05</title>
            <link>https://gitdab.com/p6nj/blip</link>
            <description
            ><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/">
                <h2>
                    UML
                </h2>
                <p>
                    Le diagramme de composants ne pose aucun problème. En revanche, pour le diagramme de classes, côté lexer, quelques questions d'implémentation se posent déjà :
                </p>
                <ul>
                    <li>Devrait-on garder la généricité des entrées telles que celles des parseurs de nom ?</li>
                    <li>Un type implémentant un trait, caché derrière le dynamic dispatch de ce trait, peut-il conserver son temps de vie ? Probablement pas, et l'erreur ne sera visible qu'à l'implémentation.</li>
                    <li>Pourrait-on créer de nouvelles variables en partition sans les déclarer auparavant ? Cela semble possible mais pourrait faciliter les typos ; on pourrait par exemple rajouter une variable sans le vouloir avec pour effet que la variable que l'ont pensait changer reste inchangée. Que se passe-t-il si une variable non déclarée est dans l'expression de l'instrument ? Devrait-on retarder l'évaluation de l'expression afin de permettre cela ?</li>
                </ul>
                <p>
                    Note: le symbole "start-here" a été renommé Marker.
                </p>
                <p>
                    Après le 1er commit sur le diagramme de classe (<a href="https://gitdab.com/breval/blip/commit/8caeacc6792a963671dbc8273cac34a5c177dee0">8caeacc6792a963671dbc8273cac34a5c177dee0</a>), je me suis rendu compte que les parseurs seront potentiellement reconstruits pleinement à chaque itération du parseur. Il serait donc plus efficace de parser entièrement l'entrée avant de la compiler, en séparant la validation sémantique de la validation syntaxique (par des erreurs différentes).
                    Pour éviter de répéter le type <pre>impl for<'i> nom::Parser<nom_locate::LocatedSpan<&'i I>, Output = Self, Error = nom::Err<nom::Error<nom_locate::LocatedSpan<&'i I>>></pre>, et comme il n'est pas possible de créer d'alias de types pour de tels types opaques, j'ai créé une struct wrapper comme proxy, TokenParser. Cependant, il faut toujours indiquer les types génériques de TokenParser dans les valeurs de retour des générateurs de parseurs. J'ai donc décidé d'utiliser un supertrait puisqu'ils peuvent en tout cas dans l'interpréteur evcxr demander des types génériques seulement utilisés dans ses prérequis.
                </p>
                </div>]]></description>
        </item>
        <item>
            <title>05/05 - 16/05</title>
            <link>https://gitdab.com/p6nj/blip</link>
            <description
            ><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/">
                <h2>
                    UML
                </h2>
                <p>
                    J'ai pris un léger retard à cause de mon voyage en avion et du jetlag.
                    J'ai fini l'UML du CLI lundi. Concernant les formats d'export audio, j'ai choisi les formats pour lesquels j'ai trouvé des librairies et ai adapté ma conception à ces dépendences.
                </p>
                <p>
                    J'ai pensé qu'il serait utile pour concevoir la structure du contexte du compilateur d'avoir un diagramme d'activités pour la méthode Token.apply ; il m'est alors venu l'idée de séparer les variables par contexte comme en Rust, que des variables locales aux boucles et autres wrappers disparaissent une fois la fin trouvée, ce qui simplifierait l'implémentation. Cependant, il faut forcément recueillir le contexte de sortie des sous-éléments puisqu'on y trouve la variable t du temps.
                    Ce diagramme d'activité m'a quand-même aidé à terminer la structure du contexte.
                </p>
                <p>
                    J'ai également envoyé les tokens du compilateur dans son module ; les méthodes statiques de parsing seront bien écrites dans le module parser (de simples impl).
                </p>
                <h2>
                	Développement
                </h2>
                <p>
                	J'ai commencé à établir la structure de la librairie et la publier sur crates.io sous le nom de bliplib. La macro "todo!()" de Rust m'a permis d'écrire des fonctions incomplètes sans géner le compilateur (et le linter). Cependant, elle n'est pas compatible avec les types impl de retour.
                	Je me suis aussi trompé sur le trait TokenParser ; je m'attendais inconsciemment à ce qu'il soit implémenté par mes tokens mais le trait sert à renvoyer des clauses qui elles l'implémentent. Le token est donc séparé du trait alors pour que le trait implémente nom::Parser avec ce token en sortie, il faut rajouter un type générique à TokenParser. Je l'ai appelé T pour Token.
                </p>
                <p>
                	Un autre problème a intervenu : l'enum Instruction de fasteval n'est pas Clonable, ce qui gène le parsing par nom (certains parsers nécessitent que la valeur de sortie soit Clone). J'ai donc forké fasteval et ajouté la macro derive sur Instruction et IC qui en dépendait. Une pull request est ouverte.
                	Cependant, il ne sera pas possible de cloner les vecteurs de dyn Token car Token: Clone nécessite Token: Sized, ce qui le rend dyn-incompatible. J'espère que ça ne posera pas de problème plus tard.
                </p>
                <p>
                	Au final, la modification de fasteval n'a servi à rien : les Instruction comme les Expression sont fortement dépendantes à une Slab et impossible d'utiliser un global mutable car la fonction compile prend une référence mutable et une autre immutable, ce qui ne passe pas à travers un MutexGuard. De plus, garder un Slab dans mon wrapper Expression est impossible car clap demande Expression: Sync + Send et Slab contient une UnsafeCell: !Send + !Clone à cause de la modernisation de ma fork. Je décide donc de garder une slab dans Expression et d'utiliser une ancienne version de fasteval sans UnsafeCell.
                	Expression n'est plus Clone.
                </p>
                <p>
                	Pour la CLI, la commande "help" étant déjà été prise par clap, j'ai choisi de la renommer memo (un rappel sur la syntaxe et les autres éléments du système). Comme clap permet de visualiser les formats disponibles via "help", cette commande a été retirée du menu mémo.
                	Je rencontre d'autres difficultés : concernant le format audio de sortie, il est utile d'avoir des paramètres en fonction du format comme le bitrate pour un MP3 par exemple. Ces options dépendent du format sauf que le format considéré à la conception est juste une string comme valeur d'argument. Aussi, comme les paramètres des formats sont issus des librairies qui implémentent les encodeurs correspondants, ceux-ci ne disposent pas des traits nécessaires au parsing par Clap. Le plus simple est donc de créer un parseur customisé comme les champs restreints Lettre. Ce parseur étant un peu complexe, je réutilise nom déjà présent en dépendences.
                </p>
                </div>]]></description>
        </item>
    </channel>
</rss>
